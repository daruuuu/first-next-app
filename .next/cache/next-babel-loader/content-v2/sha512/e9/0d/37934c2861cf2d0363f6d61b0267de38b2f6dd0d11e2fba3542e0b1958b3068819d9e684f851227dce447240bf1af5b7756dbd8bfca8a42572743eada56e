{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\Document\\\\belajar-react\\\\nextjs\\\\meet-up\\\\pages\\\\index.js\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupList from \"../components/meetups/MeetupList\"; // const DUMMY_MEETUPS = [\n//   {\n//     id: \"m1\",\n//     title: \"This is a first meetup\",\n//     image:\n//       \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Netflix-avatar.png/600px-Netflix-avatar.png\",\n//     address: \"Some address 5, 12345 Some City\",\n//     description: \"This is a first meetup\",\n//   },\n//   {\n//     id: \"m2\",\n//     title: \"This is a second meetup\",\n//     image:\n//       \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Netflix-avatar.png/600px-Netflix-avatar.png\",\n//     address: \"Some address 10, 12345 Some City\",\n//     description: \"This is a second meetup\",\n//   },\n// ];\n\nconst HomePage = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, this);\n}; // export const getServerSideProps = async (context) => {\n//   // fetch data from an API\n//   const req = context.req;\n//   const res = context.res;\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS,\n//     },\n//   };\n// };\n\n\nexport const getStaticProps = async () => {\n  // fetch data from an API\n  const client = await MongoClient.connect(\"mongodb+srv://nasirebus:7FEfzXKB8ZbuPcPH@cluster0.jiceikd.mongodb.net/?retryWrites=true&w=majority\");\n  const db = client.db(\"meetups\");\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  client.close();\n  return {\n    props: {\n      meetups: meetups.map(meetup => {\n        return {\n          title: meetup.title,\n          address: meetup.address,\n          image: meetup.image,\n          id: meetup._id.toString()\n        };\n      })\n    },\n    revalidate: 1\n  };\n};\nexport default HomePage;","map":{"version":3,"sources":["E:/Document/belajar-react/nextjs/meet-up/pages/index.js"],"names":["MongoClient","MeetupList","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","map","meetup","title","address","image","id","_id","toString","revalidate"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAOC,UAAP,MAAuB,kCAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD,C,CAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC;AAEA,QAAMC,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CACnB,oGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,CAAU,SAAV,CAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AAEAN,EAAAA,MAAM,CAACO,KAAP;AAEA,SAAO;AACLV,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAaC,MAAD,IAAY;AAC/B,eAAO;AACLC,UAAAA,KAAK,EAAED,MAAM,CAACC,KADT;AAELC,UAAAA,OAAO,EAAEF,MAAM,CAACE,OAFX;AAGLC,UAAAA,KAAK,EAAEH,MAAM,CAACG,KAHT;AAILC,UAAAA,EAAE,EAAEJ,MAAM,CAACK,GAAP,CAAWC,QAAX;AAJC,SAAP;AAMD,OAPQ;AADJ,KADF;AAWLC,IAAAA,UAAU,EAAE;AAXP,GAAP;AAaD,CA3BM;AA6BP,eAAepB,QAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\r\n\r\nimport MeetupList from \"../components/meetups/MeetupList\";\r\n\r\n// const DUMMY_MEETUPS = [\r\n//   {\r\n//     id: \"m1\",\r\n//     title: \"This is a first meetup\",\r\n//     image:\r\n//       \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Netflix-avatar.png/600px-Netflix-avatar.png\",\r\n//     address: \"Some address 5, 12345 Some City\",\r\n//     description: \"This is a first meetup\",\r\n//   },\r\n//   {\r\n//     id: \"m2\",\r\n//     title: \"This is a second meetup\",\r\n//     image:\r\n//       \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Netflix-avatar.png/600px-Netflix-avatar.png\",\r\n//     address: \"Some address 10, 12345 Some City\",\r\n//     description: \"This is a second meetup\",\r\n//   },\r\n// ];\r\n\r\nconst HomePage = (props) => {\r\n  return <MeetupList meetups={props.meetups} />;\r\n};\r\n\r\n// export const getServerSideProps = async (context) => {\r\n//   // fetch data from an API\r\n//   const req = context.req;\r\n//   const res = context.res;\r\n\r\n//   return {\r\n//     props: {\r\n//       meetups: DUMMY_MEETUPS,\r\n//     },\r\n//   };\r\n// };\r\n\r\nexport const getStaticProps = async () => {\r\n  // fetch data from an API\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://nasirebus:7FEfzXKB8ZbuPcPH@cluster0.jiceikd.mongodb.net/?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db(\"meetups\");\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const meetups = await meetupsCollection.find().toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetups: meetups.map((meetup) => {\r\n        return {\r\n          title: meetup.title,\r\n          address: meetup.address,\r\n          image: meetup.image,\r\n          id: meetup._id.toString(),\r\n        };\r\n      }),\r\n    },\r\n    revalidate: 1,\r\n  };\r\n};\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}